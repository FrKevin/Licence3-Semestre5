Rappel :
Repertoire speciale permettant de cartographier la memoire : /proc/(getpid())/maps

Processus Legers :

Fonction reentrantes (multi thread safe) :
  - Ce sont des fonction qui peuvent etre executer dans plusieurs threads sans probleme (leurs implementations est pensées)
  - Exemple de contraintes pour implementer des fonctions threads safe:
    - Ne pas utiliser de variable global (cela a pour consequence, de renvoyer les erreurs d'une autre maniere qu'avec errno (var global)), errno marchera en multi thread grace
      a la fct ernno_location en faite :p

Threads (fil d'execution) :
  - Même pid
  - Identifiant de Threads (spid)
  - Lors de la creation, le TAS est commun, par contre une nouvelle pile d'execution est alloué
  - Il ont acces à toute la memoire du programme
  - Note le premier thread (Linux) à pour identifiant spid, le même que celui de son proccessus (pid) (Raison historique)

Exemple d'usage possible :
  Cas omnipresent depuis plus de 10 ans :
    - GUI : interaction et calcul "independants"
    - Recouvrement d'E/S (thread qui peut lire ou ecrire pendant qu'un autre fait un traitement different)
  Multi-coeurs (plus recemment)

Librairie utilisé :
  pthread (Norme POSIX, une centaine de fonctions)

Creation de thread :
int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
                    void *(*start_routine) (void *), void *arg);

Probleme de synchronisation :
  Semaphore : sem_t
  MUTEX (Mutual Exlusion)
    (sémaphore à 1 jeton)
      - lock
      - unlock
    Un proprietaire de verrou (difference avec les semaphore)
    Type : pthread_mutex_t
      - Pour l'initialiser, utiliser la MACRO : PTHREAD_MUTEX_INITIALIZER //  Permet d'init le mutex, change le comportant du mutex (FUTEX, MUTEX_RECURSIVE (peut portable, nessecite pragma : #define __GNU_SOURCE), ...) 
      - pthread_mutex_lock(pthread_mutex_t*) // Ne verifie pas l'utilisateur par default sur Linux (FUTEX par default)
      - pthread_mutex_unlock(pthread_mutex_t*) // Idem

Processus VS Threads

fork()                | pthread_create
pas d'args            | void *start(void*)
1 octet exit          | ""  ""  ""  ""
getpid()              | pthread_self
wait()                | pthread_join(thread_t, void **retval)
                      | pthread_detach
exit()/return de main | pthread_exit, return de la fonction create
