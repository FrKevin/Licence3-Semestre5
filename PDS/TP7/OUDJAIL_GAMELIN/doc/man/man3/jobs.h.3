.TH "D:/Bibliothèques/Documents/Cours/Lille1/Licence3-Semestre5/PDS/TP7/OUDJAIL_GAMELIN/src/jobs.h" 3 "Thu Dec 10 2015" "mshell" \" -*- nroff -*-
.ad l
.nh
.SH NAME
D:/Bibliothèques/Documents/Cours/Lille1/Licence3-Semestre5/PDS/TP7/OUDJAIL_GAMELIN/src/jobs.h \- jobs definition  

.SH SYNOPSIS
.br
.PP
\fC#include <sys/types\&.h>\fP
.br
\fC#include 'common\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBjob_t\fP"
.br
.RI "\fIThe job struct\&. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBjstate\fP { \fBUNDEF\fP, \fBBG\fP, \fBFG\fP, \fBST\fP }
.RI "\fIpossible state \fP""
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBjobs_clearjob\fP (struct \fBjob_t\fP *job)"
.br
.RI "\fIClear the entries in a job struct\&. \fP"
.ti -1c
.RI "void \fBjobs_initjobs\fP ()"
.br
.RI "\fIInitialize the job list\&. \fP"
.ti -1c
.RI "int \fBjobs_maxjid\fP ()"
.br
.RI "\fIReturns largest allocated job ID\&. \fP"
.ti -1c
.RI "int \fBjobs_addjob\fP (pid_t pid, int state, char *cmdline)"
.br
.RI "\fIAdd a job to the job list\&. \fP"
.ti -1c
.RI "int \fBjobs_deletejob\fP (pid_t pid)"
.br
.RI "\fIDelete a job whose PID=pid from the job list\&. \fP"
.ti -1c
.RI "pid_t \fBjobs_fgpid\fP ()"
.br
.RI "\fIReturn PID of current foreground job, 0 if no such job\&. \fP"
.ti -1c
.RI "struct \fBjob_t\fP * \fBjobs_getjobpid\fP (pid_t pid)"
.br
.RI "\fIFind a job (by PID) on the job list\&. \fP"
.ti -1c
.RI "struct \fBjob_t\fP * \fBjobs_getjobjid\fP (int jid)"
.br
.RI "\fIFind a job (by JID) on the job list\&. \fP"
.ti -1c
.RI "void \fBsend_signal_to_job\fP (pid_t pid, int sig)"
.br
.RI "\fISend a sinal for job width pid or jid\&. \fP"
.ti -1c
.RI "int \fBjobs_pid2jid\fP (pid_t pid)"
.br
.RI "\fIMap process ID to job ID\&. \fP"
.ti -1c
.RI "struct \fBjob_t\fP * \fBjobs_getstoppedjob\fP ()"
.br
.RI "\fIReturn a stopped job\&. \fP"
.ti -1c
.RI "void \fBjobs_listjobs\fP ()"
.br
.RI "\fIPrint the job list\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
jobs definition 


.SH "Function Documentation"
.PP 
.SS "int jobs_addjob (pid_t pid, int state, char * cmdline)"

.PP
Add a job to the job list\&. 
.PP
\fBReturns:\fP
.RS 4
1 if success and 0 if failure 
.RE
.PP

.SS "void jobs_clearjob (struct \fBjob_t\fP * job)"

.PP
Clear the entries in a job struct\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstruct\fP \fBjob_t\fP *job\&. 
.RE
.PP

.SS "int jobs_deletejob (pid_t pid)"

.PP
Delete a job whose PID=pid from the job list\&. 
.PP
\fBReturns:\fP
.RS 4
1 if success and 0 if failure 
.RE
.PP

.SS "struct \fBjob_t\fP* jobs_getstoppedjob ()"

.PP
Return a stopped job\&. 
.PP
\fBReturns:\fP
.RS 4
NULL if any 
.RE
.PP

.SS "int jobs_pid2jid (pid_t pid)"

.PP
Map process ID to job ID\&. 
.PP
\fBReturns:\fP
.RS 4
0 if failure 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for mshell from the source code\&.
